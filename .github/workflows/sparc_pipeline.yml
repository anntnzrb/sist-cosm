name: SPARC Development Pipeline

on:
  push:
    branches: [master, feature/*, fix/*]
  pull_request:
    branches: [master]

env:
  DJANGO_SECRET_KEY: 'test-secret-key-for-ci'
  DATABASE_URL: 'postgresql://test_user:test_pass@localhost:5432/test_db'

jobs:
  quality-gates:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: "3.13"
    
    - name: Install UV package manager
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        uv sync
    
    - name: Lint with flake8
      run: |
        uv run flake8 apps/ cosmeticos_store/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        uv run flake8 apps/ cosmeticos_store/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Format check with black
      run: |
        uv run black --check apps/ cosmeticos_store/ tests/
    
    - name: Import sorting check with isort
      run: |
        uv run isort --check-only apps/ cosmeticos_store/ tests/
    
    - name: Security scan with bandit
      run: |
        uv run bandit -r apps/ cosmeticos_store/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Dependency security check
      run: |
        uv run safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Run database migrations
      run: |
        uv run python manage.py migrate --settings=cosmeticos_store.settings
      env:
        DATABASE_URL: 'postgresql://test_user:test_pass@localhost:5432/test_db'
    
    - name: Run unit tests with coverage
      run: |
        uv run coverage run --source='.' manage.py test tests.unit --settings=cosmeticos_store.settings
        uv run coverage report --fail-under=90
        uv run coverage xml
      env:
        DATABASE_URL: 'postgresql://test_user:test_pass@localhost:5432/test_db'
    
    - name: Run integration tests
      run: |
        uv run python manage.py test tests.integration --settings=cosmeticos_store.settings
      env:
        DATABASE_URL: 'postgresql://test_user:test_pass@localhost:5432/test_db'
    
    - name: Performance tests
      run: |
        uv run python manage.py test tests.performance --settings=cosmeticos_store.settings
      env:
        DATABASE_URL: 'postgresql://test_user:test_pass@localhost:5432/test_db'
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Generate test report
      run: |
        echo "## SPARC Quality Gates Report" > sparc-report.md
        echo "### Test Coverage: $(uv run coverage report --show-missing | grep TOTAL | awk '{print $4}')" >> sparc-report.md
        echo "### Security Scan: $([ -f bandit-report.json ] && echo "✅ Completed" || echo "❌ Failed")" >> sparc-report.md
        echo "### Dependency Check: $([ -f safety-report.json ] && echo "✅ Completed" || echo "❌ Failed")" >> sparc-report.md
    
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('sparc-report.md')) {
            const report = fs.readFileSync('sparc-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
          }

  deployment-check:
    runs-on: ubuntu-latest
    needs: quality-gates
    if: github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: "3.13"
    
    - name: Install UV package manager
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        uv sync
    
    - name: Collect static files
      run: |
        uv run python manage.py collectstatic --noinput --settings=cosmeticos_store.settings
      env:
        DATABASE_URL: 'sqlite:///test.db'
    
    - name: Check deployment readiness
      run: |
        uv run python manage.py check --deploy --settings=cosmeticos_store.settings
      env:
        DATABASE_URL: 'sqlite:///test.db'
        DJANGO_SECRET_KEY: 'test-secret-key'
        DEBUG: 'False'
    
    - name: Generate deployment artifacts
      run: |
        echo "Deployment ready for master branch" > deployment-status.txt
        echo "Timestamp: $(date)" >> deployment-status.txt
        echo "Commit: ${{ github.sha }}" >> deployment-status.txt